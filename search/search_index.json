{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Mordant is a multiplatform library for rendering styled text in the terminal. You can use it to add color and style to text, create tables, draw animations, and more.</p> <p>Mordant has:</p> <ul> <li>Easy colorful ANSI output with automatic detection of terminal capabilities</li> <li>Markdown rendering directly to the terminal</li> <li>Widgets for laying out terminal output, including lists, tables, panels, and more</li> <li>Support for animating any widget, like progress bars and dashboards</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Mordant is distributed through Maven Central.</p> <pre><code>dependencies {\n    implementation(\"com.github.ajalt.mordant:mordant:3.0.2\")\n\n    // optional extensions for running animations with coroutines\n    implementation(\"com.github.ajalt.mordant:mordant-coroutines:3.0.2\")\n\n    // optional widget for rendering Markdown\n    implementation(\"com.github.ajalt.mordant:mordant-markdown:3.0.2\")\n}\n</code></pre> <p>On JVM, there are more granular dependencies available.  See the docs for details.</p>"},{"location":"#if-youre-using-maven-instead-of-gradle-use-artifactidmordant-jvmartifactid","title":"If you\u2019re using Maven instead of Gradle, use <code>&lt;artifactId&gt;mordant-jvm&lt;/artifactId&gt;</code>","text":""},{"location":"#snapshots","title":"Snapshots","text":"Snapshot builds are also available <p> You'll need to add the Sonatype snapshots repository:  <pre><code>repositories {\n    maven {\n        url = uri(\"https://oss.sonatype.org/content/repositories/snapshots/\")\n    }\n}\n</code></pre> </p>"},{"location":"changelog/","title":"Releases","text":""},{"location":"changelog/#302","title":"3.0.2","text":""},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li><code>Terminal.rawPrint</code> now takes a <code>CharSequence</code> instead of a <code>String</code> (#255)</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Fixed <code>Terminal.read*OrNull</code> throwing an exception on timeout on Windows. (#256)</li> </ul>"},{"location":"changelog/#301","title":"3.0.1","text":""},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Fixed terminal size detection in the <code>mordant-jvm-ffm</code> module on macOS (#238)</li> <li>Fixed proguard filename duplication (#232)</li> </ul>"},{"location":"changelog/#300","title":"3.0.0","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>New <code>TerminalDetection</code> object that can be used to detect terminal capabilities without creating a terminal instance.</li> <li>Added new optional methods to <code>TerminalInterface</code> to control raw mode: <code>getTerminalSize</code>, <code>readInputEvent</code>, <code>enterRawMode</code>, and <code>shouldAutoUpdateSize</code>.</li> <li>Added new terminal implementation that uses the Foreign Function and Memory (FFM) API added in JDK 22.</li> <li>Split the library up into modules, so you can produce smaller JVM artifacts by only using the parts you need.</li> <li>Added support for raw mode and input events to JS and wasmJS targets when running on node.js.</li> <li>Added tvOS and watchOS native targets to all modules except the new <code>mordant-markdown</code> module.</li> <li>Added ability to control raw mode with the <code>TerminalRecorder</code>.</li> <li>Added support for unicode input in raw mode.</li> <li>Added <code>nonInteractiveWidth</code> and <code>nonInteractiveHeight</code> to <code>Terminal</code> terminal constructor to set a different width when the terminal is not interactive (e.g. when redirecting output to a file) (#140)</li> </ul>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Breaking Change Moved <code>Terminal.info.width</code> and <code>height</code> to <code>Terminal.size.width</code> and <code>height</code>.</li> <li>Breaking Change <code>TerminalInterface.info</code> is now a method with parameters instead of a property.</li> <li>Breaking Change Moved <code>Markdown</code> widget to separate <code>mordant-markdown</code> module, which is not included by default. If you use markdown rendering, you need to add that module to you dependencies.</li> <li>Breaking Change Combined all <code>ColumnWidth</code> subclasses into a single class with factory methods. If you were using <code>ColumnWidth.Custom</code>, you should now use the <code>ColumnWidth</code> constructor.</li> <li>Breaking Change The following <code>Terminal</code> methods are now extensions: <code>prompt()</code>, <code>info()</code>, <code>danger()</code>, <code>warning()</code>, <code>success()</code>, <code>muted()</code></li> <li>Breaking Change Renamed <code>TerminalInfo.crClearsLine</code> to <code>supportsAnsiCursor</code></li> <li>In raw mode on POSIX systems, pressing the escape key once will now immediately return an <code>Escape</code> event. (#193)</li> <li>Renamed <code>Terminal.info</code> property to <code>Terminal.terminalInfo</code>. The old name is deprecated.</li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>Removed constructor overloads for <code>Terminal</code>. There is now one constructor with all default parameters. </li> <li>Removed <code>Terminal.colors</code>. All colors rendered with the terminal are now automatically downsampled.</li> <li>Removed previously deprecated methods.</li> </ul>"},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Fixed ConcurrentModificationException from progress bars when updated under very high concurrency (#204)</li> <li>Improved performance of progress bars under high concurrency. (#207)</li> <li>Fixed <code>NoClassDefFoundError</code> when running with certain gradle plugins (#217)</li> <li>Fixed whitespace of aligned table captions on narrow terminals (#216)</li> </ul>"},{"location":"changelog/#272","title":"2.7.2","text":""},{"location":"changelog/#fixed_3","title":"Fixed","text":"<ul> <li>Fixed raw mode on macOS for JVM and native not using the correct termios constants. (#180)</li> <li>Raw mode on macOS and Linux will now report the <code>ESC ESC</code> sequence as an <code>Escape</code> key event.</li> <li>Fixed raw mode on GraalVM native image not compiling with musl libc. Contributed by @hubvd (#189)</li> </ul>"},{"location":"changelog/#271","title":"2.7.1","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Added support for raw mode on GraalVM native image on macOS and Linux. Contributed by @hubvd (#186)</li> </ul>"},{"location":"changelog/#fixed_4","title":"Fixed","text":"<ul> <li>Fix markdown rendering not supporting math blocks (#182)</li> <li>Fix exception thrown when using <code>readEvent</code> in raw mode when some windows terminals lose focus </li> <li>Fix <code>MultiplatformSystem.readFileAsUtf8</code> not supporting special files on JVM on Linux</li> </ul>"},{"location":"changelog/#270","title":"2.7.0","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Added raw mode support for reading keyboard and mouse events. See the docs at https://ajalt.github.io/mordant/ for details. This feature is currently supported on all targets except JS, wasmJS, and Graal Native Image.</li> <li>Added <code>Termianl.interactiveSelectList</code>, <code>Terminal.interactiveMultiSelectList</code>, and <code>InteractiveSelectListBuilder</code> that let you pick one or more items from a list using the arrow keys.</li> </ul>"},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li>Update Kotlin to 2.0.0</li> </ul>"},{"location":"changelog/#fixed_5","title":"Fixed","text":"<ul> <li>Fix animations to correctly clear the last frame when animating a non-rectangular widget that changes size.</li> <li>Fix closing bold and dim styles when one is nested in the other.</li> <li>Fix <code>NoClassDefFoundError</code> in terminal detection on some platforms.</li> </ul>"},{"location":"changelog/#260","title":"2.6.0","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>Publish <code>iosArm64</code> and <code>iosX64</code> targets.</li> <li>Added <code>MultiplatformSystem</code> that provides multiplatform implementations of some non-terminal functionality that commonly used for command line apps: <code>readEnvironmentVariable</code>, <code>exitProcess</code>, and <code>readFileAsUtf8</code>.</li> </ul>"},{"location":"changelog/#250","title":"2.5.0","text":""},{"location":"changelog/#added_4","title":"Added","text":"<ul> <li>Publish <code>linuxArm64</code> and <code>wasmJs</code> targets.</li> </ul>"},{"location":"changelog/#240","title":"2.4.0","text":"<p>This release includes a complete rewrite of the progress bar system. The new system is more performant and flexible, and allows for more complex progress animations. The old progress bar APIs are deprecated, but will continue to work.</p> <p>See the documentation website for more information.</p>"},{"location":"changelog/#added_5","title":"Added","text":"<ul> <li>New implementation of progress bars with a number of improvements:</li> <li>Support for animating multiple progress bars at the same time.</li> <li>New <code>mordant-coroutines</code> modules with extensions for animating with coroutines instead of threads.</li> <li>Any widget can be added to a progress layout, not just the built-in cell types</li> <li>Added <code>compact</code> style to <code>timeRemaining</code> cells.</li> <li>Added <code>marquee</code> cell that can scroll text that is larger than a fixed width. </li> <li>Added <code>timeElapsed</code> cell that shows the time elapsed since the start of the animation.</li> <li>Added <code>Viewport</code> widget that can crop or pad another widget to a fixed size, and scroll it within that size.</li> <li>Added <code>precision</code> parameter to <code>completed</code> progress cell that controls the number of decimal places shown.</li> <li>Animations now automatically handle the terminal resizing, although on some terminals partially drawn frames may be visible. Due to a bug in JNI, the terminal size isn\u2019t automatically updated on JVM on macOS.</li> <li>Added <code>TableBuilder.addPaddingWidthToFixedWidth</code> option to control how padding is added to fixed width columns.</li> </ul>"},{"location":"changelog/#changed_3","title":"Changed","text":"<ul> <li>Animations now never add a trailing newline while they\u2019re running. They always add one once the animation is stopped. The <code>trailingLinebreak</code> parameter is deprecated. This allows full screen animations without a blank line at the bottom. </li> </ul>"},{"location":"changelog/#fixed_6","title":"Fixed","text":"<ul> <li>Vertical layout now correctly pads non-text cells when <code>align</code> is set to <code>TextAlign.LEFT</code></li> <li>Fixed exception when hiding the cursor on browsers on JS target.</li> <li>Update internal code generation to be compatible with the latest versions of R8 (#161)</li> </ul>"},{"location":"changelog/#230","title":"2.3.0","text":""},{"location":"changelog/#added_6","title":"Added","text":"<ul> <li>Vararg constructors for <code>UnorderedList</code> and <code>OrderedList</code></li> <li><code>UnorderedList</code> and <code>OrderedList</code> now support being empty</li> <li>Added optional terminal frame to <code>TerminalRecorder.outputAsHtml</code></li> </ul>"},{"location":"changelog/#changed_4","title":"Changed","text":"<ul> <li>When setting conflicting styles on a <code>Table</code> or its cells, the innermost style now takes precedence (i.e. if you set different styles on the whole table and a cell, the style applied to the cell will be used).</li> </ul>"},{"location":"changelog/#fixed_7","title":"Fixed","text":"<ul> <li>Updated bundled proguard rules (#130)</li> </ul>"},{"location":"changelog/#220","title":"2.2.0","text":""},{"location":"changelog/#added_7","title":"Added","text":"<ul> <li>Added <code>ColumnWidth.Custom</code> that allows more control over column width behavior in tables. (#109)</li> <li>Added <code>showPulse</code> parameter to <code>ProgressLayout.progressBar</code>, allowing you to disable the pulse animation for a bar.</li> <li>Added support for detecting terminal capabilities on mintty. Thanks to @sschuberth for the contribution. (#127)</li> </ul>"},{"location":"changelog/#changed_5","title":"Changed","text":"<ul> <li>Update Kotlin to 1.9</li> <li>Use the native C API when building a native image on GraalVM, which reduces binary size and removes the need to reflection. Thanks to @hubvd for the contribution (#119)</li> </ul>"},{"location":"changelog/#fixed_8","title":"Fixed","text":"<ul> <li>Fixed exception thrown in environments that are missing required shared native libraries.</li> <li>Fixed animations clearing too much space when the animation changes size while running. (#110)</li> <li>Improved terminal capability detection for Xterm terminals. (#113)</li> <li>Update Markdown parser dependency to fix crashes on native release executables</li> </ul>"},{"location":"changelog/#210","title":"2.1.0","text":""},{"location":"changelog/#added_8","title":"Added","text":"<ul> <li>Added <code>ConfirmationPrompt</code> that asks the user to enter the same value twice, which is commonly used for password inputs.</li> </ul>"},{"location":"changelog/#201","title":"2.0.1","text":""},{"location":"changelog/#added_9","title":"Added","text":"<ul> <li>Include metadata in JVM jars to support GraalVM native-image.</li> </ul>"},{"location":"changelog/#fixed_9","title":"Fixed","text":"<ul> <li>Fix animations printing an extra frame after <code>stop</code> is called when running in the IntelliJ console. (#105)</li> </ul>"},{"location":"changelog/#200","title":"2.0.0","text":""},{"location":"changelog/#deprecated","title":"Deprecated","text":"<ul> <li>Deprecated <code>TerminalColors</code> is favor of <code>TextColors</code> and <code>Terminal.theme</code></li> </ul>"},{"location":"changelog/#200-beta14","title":"2.0.0-beta14","text":""},{"location":"changelog/#added_10","title":"Added","text":"<ul> <li><code>Terminal.rawPrint</code> which allows you to print ANSI codes manually. (#91)</li> <li>Option to disable trailing line breaks on animations.</li> <li><code>Terminal.print</code>, <code>println</code>, and <code>rawPrint</code> now accept a <code>stderr</code> parameter that will print to stderr (if available). </li> </ul>"},{"location":"changelog/#changed_6","title":"Changed","text":"<ul> <li>Fix typo in enum name: renamed <code>Borders.TOM_BOTTOM</code> to <code>Borders.TOP_BOTTOM</code>. (#100)</li> <li>The terminal cursor will now be hidden when <code>progressAnimation</code> is running.</li> </ul>"},{"location":"changelog/#removed_1","title":"Removed","text":"<ul> <li>Removed <code>TerminalRecorder.currentContent</code>. Use <code>stdout()</code>, <code>stderr()</code> or <code>output()</code> instead.</li> <li>Removed <code>Terminal.forStdErr()</code> and <code>TerminalInterface.forStdErr()</code>. Use <code>Terminal.println(stderr=true)</code> instead.</li> </ul>"},{"location":"changelog/#200-beta13","title":"2.0.0-beta13","text":""},{"location":"changelog/#added_11","title":"Added","text":"<ul> <li>Add <code>Animation.stop()</code> to stop an animation without clearing it. (#95)</li> <li>Animations now support resuming after a call to <code>stop</code> or <code>clear</code>. (#94)</li> <li><code>TextStyles.reset</code>, <code>TextStyles.resetForeground</code>, and <code>TextStyles.resetBackground</code> to clear existing styles.</li> </ul>"},{"location":"changelog/#fixed_10","title":"Fixed","text":"<ul> <li>Fix <code>TerminalInfo.interactive</code> not including <code>outputInteractive</code></li> <li>Fix prompts on JS targets that were broken by KT-55817 </li> </ul>"},{"location":"changelog/#changed_7","title":"Changed","text":"<ul> <li>Source-incompatible change: All boolean fields on <code>TextStyle</code> are now nullable. A null field indicates no change to the previous value when adding or nesting styles.</li> <li><code>verticalLayout{}</code> now defaults <code>TextAlign.NONE</code>, meaning it won\u2019t add any trailing whitespace to lines. You can return to the old behavior with <code>align = TextAlign.LEFT</code>.</li> <li>When nesting styles, the outer style will now override inner styles at the start of a string. (e.g. <code>red(blue(\"x\")) == red(\"x\")</code>) </li> <li>Definition List terms and entries can now be empty</li> </ul>"},{"location":"changelog/#200-beta12","title":"2.0.0-beta12","text":""},{"location":"changelog/#fixed_11","title":"Fixed","text":"<ul> <li>Switch back to calling <code>stty</code> for <code>detectTerminalSize</code> on macOS. (#86)</li> <li><code>OverflowWrap</code> is now properly ignored when using a non-wrapping <code>Whitespace</code> value. </li> </ul>"},{"location":"changelog/#200-beta11","title":"2.0.0-beta11","text":""},{"location":"changelog/#added_12","title":"Added","text":"<ul> <li>Tables and other layouts can now be completely empty (#82)</li> </ul>"},{"location":"changelog/#changed_8","title":"Changed","text":"<ul> <li>Update Kotlin to 1.8.0</li> </ul>"},{"location":"changelog/#removed_2","title":"Removed","text":"<ul> <li>Removed JS/Legacy publication. The JS target only publishes artifacts built with the IR compiler.</li> </ul>"},{"location":"changelog/#200-beta10","title":"2.0.0-beta10","text":""},{"location":"changelog/#changed_9","title":"Changed","text":"<ul> <li>JVM: terminal detection now uses JNA to call kernel functions directly. </li> <li>Interactive state of stdin and stdout are now detected separately. </li> <li>Terminal size detection is now fast since it does not need a subprocess.</li> </ul>"},{"location":"changelog/#fixed_12","title":"Fixed","text":"<ul> <li>Detect terminal correctly when running in the IntelliJ terminal tab, but not through a run action. (#76)</li> </ul>"},{"location":"changelog/#deprecated_1","title":"Deprecated","text":"<ul> <li><code>timeoutMs</code> parameter to <code>TerminalDetection.updateTerminalSize</code>. This function is now fast on all platforms. </li> </ul>"},{"location":"changelog/#200-beta9","title":"2.0.0-beta9","text":""},{"location":"changelog/#changed_10","title":"Changed","text":"<ul> <li>Stop stripping trailing newline from text when using <code>Whitespace.PRE</code> (#75)</li> </ul>"},{"location":"changelog/#200-beta8","title":"2.0.0-beta8","text":""},{"location":"changelog/#added_13","title":"Added","text":"<ul> <li>Implemented <code>hideInput</code> for prompts on native targets (#63)</li> <li>Improve cell-width calculation for emoji sequences like skin tone modifiers (#64)</li> <li>Added <code>Theme.plus</code> to combine two themes</li> <li>Added <code>Padding.plus</code> to combine two padding values</li> </ul>"},{"location":"changelog/#changed_11","title":"Changed","text":"<ul> <li>Replaced most of the <code>Padding</code> constructor and <code>Widget.withPadding</code> overloads with a unified builder interface</li> <li>Renamed the top level <code>row</code> and <code>column</code> builders to <code>horizonalLayout</code> and <code>verticalLayout</code>, respectively</li> <li>Update Kotlin to 1.7.20</li> <li>Kotlin/Native: use new default memory manager. Objects are no longer frozen.</li> </ul>"},{"location":"changelog/#removed_3","title":"Removed","text":"<ul> <li>Removed <code>buildWidget</code>. Use <code>horizonalLayout</code> and <code>verticalLayout</code> instead.</li> </ul>"},{"location":"changelog/#fixed_13","title":"Fixed","text":"<ul> <li>Terminal detection would sometimes incorrectly identify the process as running in IntelliJ (#72)</li> <li><code>updateTerminalSize</code> would sometimes fail to find the <code>stty</code> command (#66)</li> </ul>"},{"location":"changelog/#200-beta7","title":"2.0.0-beta7","text":""},{"location":"changelog/#added_14","title":"Added","text":"<ul> <li>Functionality for reading user input: <code>Terminal.readLineOrNull</code>, <code>Terminal.prompt</code> and various <code>Prompt</code> classes</li> <li><code>TerminalRecorder</code> that saves output to memory rather than printing it.</li> <li><code>TerminalRecorder.outputAsHtml()</code> that can render recorded output as an html file.</li> <li></li> </ul>"},{"location":"changelog/#changed_12","title":"Changed","text":"<ul> <li>When building tables, <code>borders</code> has been renamed <code>cellBorders</code>, and <code>outerBorder: Boolean</code> has been replaced with <code>tableBorders: Borders?</code>, which allows more control over the table\u2019s outside borders. (#58)</li> <li>Update Kotlin to 1.7.0</li> </ul>"},{"location":"changelog/#fixed_14","title":"Fixed","text":"<ul> <li>Avoid clobbering output when using <code>Terminal.forStdErr</code> while an animation is running. (#54)</li> </ul>"},{"location":"changelog/#deprecated_2","title":"Deprecated","text":"<ul> <li>Deprecated the <code>VirtualTerminalInterface</code>. Use <code>TerminalRecorder</code> instead.</li> </ul>"},{"location":"changelog/#200-beta6","title":"2.0.0-beta6","text":""},{"location":"changelog/#changed_13","title":"Changed","text":"<ul> <li>Update Kotlin to 1.6.20</li> <li>Publish JS target with the IR format in addition to LEGACY</li> </ul>"},{"location":"changelog/#fixed_15","title":"Fixed","text":"<ul> <li>Fix race condition when using ProgressAnimation and adding interceptors in JVM (#55)</li> </ul>"},{"location":"changelog/#200-beta5","title":"2.0.0-beta5","text":""},{"location":"changelog/#added_15","title":"Added","text":"<ul> <li>Progress bars and other single-line animations are now supported in the IntelliJ console (#49)</li> <li>Added <code>bottomTitle</code> to <code>Panel</code></li> <li><code>Terminal.forStdErr</code> for printing to stderr rather than stdout</li> <li>Add <code>macosArm64</code> target for native M1 macs</li> </ul>"},{"location":"changelog/#changed_14","title":"Changed","text":"<ul> <li>Update Kotlin to 1.6.10</li> <li>Breaking change: Renamed <code>Table</code> and <code>Panel</code>\u2019s <code>borderStyle</code> property to <code>borderType</code> and <code>borderTextStyle</code> to <code>borderStyle</code></li> <li>Breaking change: Renamed <code>TerminalInfo</code>\u2019s <code>stdinInteractive</code> and <code>stdoutInteractive</code> to <code>inputInteractive</code> and <code>outputInteractive</code>, respectively</li> </ul>"},{"location":"changelog/#fixed_16","title":"Fixed","text":"<ul> <li>Fix regression in clearing animations (#48)</li> </ul>"},{"location":"changelog/#200-beta4","title":"2.0.0-beta4","text":""},{"location":"changelog/#added_16","title":"Added","text":"<ul> <li><code>Spinner</code> widget that displays a looping animation</li> <li><code>EmptyEidget</code> widget that can be used as a placeholder in layouts</li> <li><code>row{}</code> and <code>column{}</code> widget layouts that create a single row/column of widgets</li> </ul>"},{"location":"changelog/#fixed_17","title":"Fixed","text":"<ul> <li>Reduced flickering on high frame rate animations</li> </ul>"},{"location":"changelog/#200-beta3","title":"2.0.0-beta3","text":""},{"location":"changelog/#changed_15","title":"Changed","text":"<ul> <li>Update Kotlin to 1.5.31</li> <li>Update Colormath to 3.0. If you use and colormath colors directly, you may need to update your imports.</li> </ul>"},{"location":"changelog/#fixed_18","title":"Fixed","text":"<ul> <li>Fixed exception thrown when parsing markdown tables with empty cells</li> <li>Fixed rendering of markdown image reference links and link content</li> </ul>"},{"location":"changelog/#200-beta2","title":"2.0.0-beta2","text":""},{"location":"changelog/#added_17","title":"Added","text":"<ul> <li>Published artifacts for macOS</li> </ul>"},{"location":"changelog/#changed_16","title":"Changed","text":"<ul> <li>Update Kotlin to 1.5.10</li> <li>All text instances and print functions now default to preformatted whitespace, meaning that spaces and newlines will be preserved. You can explicitly pass <code>Whitespace.NORMAL</code> to restore the previous behavior.</li> </ul>"},{"location":"changelog/#200-beta1","title":"2.0.0-beta1","text":""},{"location":"changelog/#added_18","title":"Added","text":"<ul> <li><code>Table.contentToCsv</code> to render a table\u2019s cells to csv format</li> <li>Added support for JavaScript and linux native targets </li> <li>Getter properties for standard theme styles</li> </ul>"},{"location":"changelog/#changed_17","title":"Changed","text":"<ul> <li>Update Kotlin to 1.4.31</li> <li>Improve terminal capabilities detection</li> </ul>"},{"location":"changelog/#200-alpha2","title":"2.0.0-alpha2","text":""},{"location":"changelog/#added_19","title":"Added","text":"<ul> <li><code>Terminal.progressAnimation</code> builder to create a customizable progress bar animation</li> <li>Improved cursor APIs and added ability to produce cursor ANSI codes as a string</li> <li>Add ability to override detected terminal interactivity separately from the ANSI capabilities  (#7)</li> </ul>"},{"location":"changelog/#changed_18","title":"Changed","text":"<ul> <li>Rework theming system to simplify customization</li> </ul>"},{"location":"changelog/#200-alpha1","title":"2.0.0-alpha1","text":"<p>Mordant 2.0 is a rewrite that retains the simple APIs of Mordant 1.0, and adds support for rendering complex widgets.</p>"},{"location":"changelog/#added_20","title":"Added","text":"<ul> <li>Added renderable widgets, including tables, panels, and lists</li> <li>Added markdown rendering</li> <li>Added a theme system to customize text styles on an entire terminal instance</li> <li>Added animations that automatically clear the previous frame when redrawing</li> </ul>"},{"location":"changelog/#changed_19","title":"Changed","text":"<ul> <li>Improved terminal capability detection</li> <li>ANSI colors and styles can now be applied through the <code>TextColors</code> and <code>TextStyles</code> top-level   objects, and <code>Terminal.print</code> will downsample th resulting strings based on the detected terminal   capabilities.</li> </ul>"},{"location":"changelog/#121","title":"1.2.1","text":""},{"location":"changelog/#changed_20","title":"Changed","text":"<ul> <li>Improve support for color detection in IntelliJ and VS Code terminals</li> </ul>"},{"location":"changelog/#120","title":"1.2.0","text":""},{"location":"changelog/#added_21","title":"Added","text":"<ul> <li>Add functions for generating ANSI cursor movement</li> <li>Add ability to generate ANSI color codes from any colormath color object</li> <li>Update colormath to 1.2.0</li> </ul>"},{"location":"changelog/#110","title":"1.1.0","text":""},{"location":"changelog/#added_22","title":"Added","text":"<ul> <li>Add support for XYZ and LAB color spaces</li> </ul>"},{"location":"changelog/#100","title":"1.0.0","text":"<ul> <li>Initial Release</li> </ul>"},{"location":"guide/","title":"Getting Started","text":"<p>Mordant is split into a number of modules to allow you to pick the functionality you need. On JVM, there are several modules that implement <code>TerminalInterface</code> using different dependencies.</p> All-in-one gradle dependenciesIndividual JVM gradle dependencies <pre><code>// Adds all JVM interface modules\nimplementation(\"com.github.ajalt.mordant:mordant:$mordantVersion\")\n\n// optional extensions for running animations with coroutines\nimplementation(\"com.github.ajalt.mordant:mordant-coroutines:$mordantVersion\")\n\n// optional widget for rendering Markdown\nimplementation(\"com.github.ajalt.mordant:mordant-markdown:$mordantVersion\")\n</code></pre> <pre><code>// The `:mordant-core` module doesn't include any JVM interface modules, so you'll need one or\n// more if you're targeting JVM. If you don't include any, features like raw mode and size\n// detection won't work, but colors and styles still will.\nimplementation(\"com.github.ajalt.mordant:mordant-core:$mordantVersion\")\n\n// This module uses the Java Foreign Function and Memory API. It requires JDK 22+, and you must \n// add `--enable-native-access=ALL-UNNAMED` to your `java` command line arguments.\nimplementation(\"com.github.ajalt.mordant:mordant-jvm-ffm:$mordantVersion\")\n\n// This module uses the Java Native Access library. It supports all versions of Java, but \n// requires linking to a bundled native library, so it increases your JAR size.\nimplementation(\"com.github.ajalt.mordant:mordant-jvm-jna:$mordantVersion\")\n\n// This module uses the GraalVM Native Image FFI interface. This only supports Graal Native Image.\nimplementation(\"com.github.ajalt.mordant:mordant-jvm-graal-ffi:$mordantVersion\")\n\n// optional extensions for running animations with coroutines\nimplementation(\"com.github.ajalt.mordant:mordant-coroutines:$mordantVersion\")\n\n// optional widget for rendering Markdown\nimplementation(\"com.github.ajalt.mordant:mordant-markdown:$mordantVersion\")\n</code></pre>"},{"location":"guide/#text-colors-and-styles","title":"Text Colors and Styles","text":"<p>Create a Terminal instance, and import any enum entries you want from TextColors and TextStyles. The println function on your <code>Terminal</code> will detect your current terminal capabilities and automatically downsample colors if necessary.</p> <p>Use <code>color.bg</code> to create a background color, or <code>color1 on color2</code> to combine a foreground and background.</p> CodeOutput <pre><code>import com.github.ajalt.mordant.rendering.TextColors.*\nimport com.github.ajalt.mordant.rendering.TextStyles.*\nimport com.github.ajalt.mordant.terminal.Terminal\nimport com.github.ajalt.mordant.rendering.TextColors.Companion.rgb\n\nval t = Terminal()\nt.println(brightRed(\"You can use any of the standard ANSI colors\"))\n\nval style = (bold + black + strikethrough)\nt.println(\n    cyan(\"You ${(green on white)(\"can ${style(\"nest\")} styles\")} arbitrarily\")\n)\n\nt.println(rgb(\"#b4eeb4\")(\"You can also use true color and color spaces like HSL\"))\n</code></pre> <p> \u25cf\u00a0\u25cf\u00a0\u25cf\u00a0 <pre>\nYou can use any of the standard ANSI colors\nYou can nest styles arbitrarily\nYou can also use true color and other color spaces like HSL\n</pre> </p>"},{"location":"guide/#terminal-color-support-detection","title":"Terminal color support detection","text":"<p>By default, <code>Terminal()</code> will try to detect ANSI support in the current stdout stream. If you\u2019d like to override the detection, you can pass a specific value to the Terminal constructor.</p> <p>For example, to always output ANSI RGB color codes, even if stdout is currently directed to a file, you can do this:</p> <pre><code>Terminal(AnsiLevel.TRUECOLOR)\n</code></pre>"},{"location":"guide/#text-wrapping-and-alignment","title":"Text Wrapping and Alignment","text":"<p><code>Terminal.println</code> will preserve whitespace by default, but you can use the <code>Text</code> widget for more advanced formatting. You can use the Whitespace, TextAlign, and OverflowWrap enums to format text. They behave similar to the CSS properties of the same names.</p>"},{"location":"guide/#text-wrapping","title":"Text Wrapping","text":"<p>Pass one of the Whitespace values to the <code>Text</code> constructor to control how whitespace is handled. You can also set a <code>width</code> to wrap the text to a specific width rather than the terminal width.</p> CodeOutput <pre><code>val text = \"\"\"\nThis is a long line {\n    This line is indented\n}\n\"\"\".trimIndent()\n\nfor (entry in Whitespace.entries) {\n    terminal.println(\n        Panel(\n            content = Text(text, whitespace = entry, width = 17),\n            title = Text(entry.name)\n        )\n    )\n}\n</code></pre> <p> \u25cf\u00a0\u25cf\u00a0\u25cf\u00a0 <pre>\n\u256d\u2500\u2500\u2500\u2500 NORMAL \u2500\u2500\u2500\u2500\u256e\n\u2502This is a long  \u2502\n\u2502line { This line\u2502\n\u2502is indented }   \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 NOWRAP \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502This is a long line { This line is indented }\u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 PRE \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502This is a long line {    \u2502\n\u2502    This line is indented\u2502\n\u2502}                        \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500\u2500\u2500 PRE_WRAP \u2500\u2500\u2500\u256e\n\u2502This is a long  \u2502\n\u2502line {          \u2502\n\u2502    This line is\u2502\n\u2502indented        \u2502\n\u2502}               \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500\u2500 PRE_LINE \u2500\u2500\u256e\n\u2502This is a long\u2502\n\u2502line {        \u2502\n\u2502This line is  \u2502\n\u2502indented      \u2502\n\u2502}             \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> </p> <p>Tip</p> <p>You can format styled text too.</p> <pre><code>Text(red(\"Hello, world!\"), whitespace = NORMAL)\n</code></pre>"},{"location":"guide/#text-alignment","title":"Text Alignment","text":"<p>You can use the TextAlign values to align or justify text.</p> CodeOutput <pre><code>for (entry in TextAlign.entries) {\n    terminal.println(\n        Text(\n            (black on blue)(\"align = ${entry.name}\"),\n            align = entry, width = 20\n        ),\n    )\n}\n</code></pre> <p> \u25cf\u00a0\u25cf\u00a0\u25cf\u00a0 <pre>\nalign = LEFT        \n       align = RIGHT\n   align = CENTER   \nalign   =    JUSTIFY\nalign = NONE\n</pre> </p>"},{"location":"guide/#text-overflow","title":"Text Overflow","text":"<p>If you are wrapping text that has long words that exceed the line length by themselves, you can use the OverflowWrap enum to control how they are handled.</p> CodeOutput <pre><code>for (entry in OverflowWrap.entries) {\n    terminal.println(\n        Panel(\n            content = Text(\n                \"overflow_wrap\",\n                whitespace = Whitespace.NORMAL,\n                overflowWrap = entry,\n                width = 8\n            ),\n            title = Text(entry.name)\n        )\n    )\n}\n</code></pre> <p> \u25cf\u00a0\u25cf\u00a0\u25cf\u00a0 <pre>\n\u256d\u2500\u2500 NORMAL \u2500\u2500\u2500\u256e\n\u2502overflow_wrap\u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d BREAK_WORD \u2500\u256e\n\u2502overflow     \u2502\n\u2502_wrap        \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 TRUNCATE \u2500\u2500\u256e\n\u2502overflow     \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 ELLIPSES \u2500\u2500\u256e\n\u2502overflo\u2026     \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> </p> <p>Note</p> <p><code>OverflowWrap</code> has no effect when used with <code>Whitespace.PRE</code> or <code>Whitespace.NOWRAP</code>.</p>"},{"location":"guide/#tables","title":"Tables","text":"<p>Use the table DSL to define table widgets.</p> CodeOutput <pre><code>t.println(table {\n    header { row(\"Column 1\", \"Column 2\") }\n    body { row(\"1\", \"2\") }\n})\n</code></pre> <p> \u25cf\u00a0\u25cf\u00a0\u25cf\u00a0 <pre>\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Column 1 \u2502 Column 2 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1        \u2502 2        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</pre> </p> <p>Mordant gives you lots of customization for your tables, including striped row styles, row and column spans, and different border styles.</p> OutputCode <p> \u25cf\u00a0\u25cf\u00a0\u25cf\u00a0 <pre>\n                                                              Percent Change  \n                                  2020      2021      2022   2020-21  2021-21 \n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\n Average income before taxes \u2502 $84,352   $87,432   $94,003 \u2502     3.7      7.5 \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n Average annual expenditures \u2502 $61,332   $66,928   $72,967 \u2502     9.1      9.0 \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   Food                      \u2502   7,310     8,289     9,343 \u2502    13.4     12.7 \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   Housing                   \u2502  21,417    22,624    24,298 \u2502     5.6      7.4 \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   Apparel and services      \u2502   1,434     1,754     1,945 \u2502    22.3     10.9 \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   Transportation            \u2502   9,826    10,961    12,295 \u2502    11.6     12.2 \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   Healthcare                \u2502   5,177     5,452     5,850 \u2502     5.3      7.3 \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   Entertainment             \u2502   2,909     3,568     3,458 \u2502    22.7     -3.1 \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   Education                 \u2502   1,271     1,226     1,335 \u2502    -3.5      8.9 \n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\n            Remaining income \u2502 $23,020 \u2502 $20,504 \u2502 $21,036 \u2502                  \n                     via U.S. Bureau of Labor Statistics                      \n</pre> </p> <pre><code>table {\n    borderType = SQUARE_DOUBLE_SECTION_SEPARATOR\n    borderStyle = rgb(\"#4b25b9\")\n    align = RIGHT\n    tableBorders = NONE\n    header {\n        style = brightRed + bold\n        row {\n            cellBorders = NONE\n            cells(\"\", \"\", \"\", \"\")\n            cell(\"Percent Change\") {\n                columnSpan = 2\n                align = CENTER\n            }\n        }\n        row(\"\", \"2020\", \"2021\", \"2022\", \"2020-21\", \"2021-21\") { cellBorders = BOTTOM }\n    }\n    body {\n        style = green\n        column(0) {\n            align = LEFT\n            cellBorders = ALL\n            style = brightBlue\n        }\n        column(4) {\n            cellBorders = LEFT_BOTTOM\n            style = brightBlue\n        }\n        column(5) {\n            style = brightBlue\n        }\n        rowStyles(TextStyle(), dim.style)\n        cellBorders = TOP_BOTTOM\n        row(\"Average income before taxes\", \"$84,352\", \"$87,432\", \"$94,003\", \"3.7\", \"7.5\")\n        row(\"Average annual expenditures\", \"$61,332\", \"$66,928\", \"$72,967\", \"9.1\", \"9.0\")\n        row(\"  Food\", \"7,310\", \"8,289\", \"9,343\", \"13.4\", \"12.7\")\n        row(\"  Housing\", \"21,417\", \"22,624\", \"24,298\", \"5.6\", \"7.4\")\n        row(\"  Apparel and services\", \"1,434\", \"1,754\", \"1,945\", \"22.3\", \"10.9\")\n        row(\"  Transportation\", \"9,826\", \"10,961\", \"12,295\", \"11.6\", \"12.2\")\n        row(\"  Healthcare\", \"5,177\", \"5,452\", \"5,850\", \"5.3\", \"7.3\")\n        row(\"  Entertainment\", \"2,909\", \"3,568\", \"3,458\", \"22.7\", \"-3.1\")\n        row(\"  Education\", \"1,271\", \"1,226\", \"1,335\", \"-3.5\", \"8.9\")\n    }\n    footer {\n        style(italic = true)\n        row {\n            cells(\"Remaining income\", \"$23,020\", \"$20,504\", \"$21,036\")\n        }\n    }\n    captionBottom(dim(\"via U.S. Bureau of Labor Statistics\"))\n}\n</code></pre>"},{"location":"guide/#layout","title":"Layout","text":"<p>If you need to lay out multiple widgets or strings, you can use the grid builder, which has an API similar to <code>table</code>, but doesn\u2019t apply styling by default</p> CodeOutput <pre><code>grid {\n    row(\"Grid Builder\", \"Supports\", \"Alignment\")\n    row {\n        cell(\"Left\") { align = LEFT }\n        cell(\"Center\") { align = CENTER }\n        cell(\"Right\") { align = RIGHT }\n    }\n}\n</code></pre> <p> \u25cf\u00a0\u25cf\u00a0\u25cf\u00a0 <pre>\nGrid Builder Supports Alignment\nLeft          Center      Right\n</pre> </p> <p>There are also the horizontalLayout and verticalLayout builders if you don\u2019t need a full grid.</p> CodeOutput <pre><code>horizontalLayout {\n    cell(\"Spinner:\")\n    cell(Spinner.Dots(initial = 2))\n}\n</code></pre> <p> \u25cf\u00a0\u25cf\u00a0\u25cf\u00a0 <pre>\nSpinner: \u2839\n</pre> </p>"},{"location":"guide/#controlling-the-cursor","title":"Controlling the cursor","text":"<p>You can show and hide the cursor, move it around, and clear parts of the screen with the cursor property on <code>Terminal</code>. If your terminal doesn\u2019t support cursor movements (like when output is redirected to a file) these commands are no-ops.</p> <pre><code>val t = Terminal()\nt.cursor.move {\n    up(3)\n    startOfLine()\n    clearScreenAfterCursor()\n}\nt.cursor.hide(showOnExit = true)\n</code></pre>"},{"location":"guide/#animations","title":"Animations","text":"<p>You can animate any widget like a table with Terminal.animation, or any regular string with Terminal.textAnimation. For progress bar animations, see the docs on progress bars.</p> CodeOutput <pre><code>val terminal = Terminal()\nval a = terminal.textAnimation&lt;Int&gt; { frame -&gt;\n    (1..50).joinToString(\"\") {\n        val hue = (frame + it) * 3 % 360\n        TextColors.hsv(hue, 1, 1)(\"\u2501\")\n    }\n}\n\nterminal.cursor.hide(showOnExit = true)\nrepeat(120) {\n    a.update(it)\n    Thread.sleep(25)\n}\n</code></pre> <p></p> <p>Tip</p> <p>If you have an <code>animation&lt;Unit&gt;</code> or <code>textAnimation&lt;Unit&gt;</code>, you can refresh them automatically with animateOnThread or animateOnCoroutine.</p>"},{"location":"guide/#prompting-for-input","title":"Prompting for input","text":"<p>You can ask the user to enter text and wait for a response with Terminal.prompt:</p> CodeOutput <pre><code>val t = Terminal()\nval response = t.prompt(\"Choose a size\", choices=listOf(\"small\", \"large\"))\nt.println(\"You chose: $response\")\n</code></pre> <pre><code>$ ./example\nChoose a size [small, large]: small\nYou chose: small\n</code></pre> <p>You can customize the prompt behavior further or convert the response to other types creating a subclass of the Prompt class. Mordant includes StringPrompt, YesNoPrompt, and ConfirmationPrompt classes for common use cases.</p>"},{"location":"input/","title":"Keyboard and Mouse Input With Raw Mode","text":"<p>Normally when reading input from the user with functions like readLineOrNull, the terminal will wait for the user to press enter before sending the input. But if you want to read keys as soon as they are pressed, you can use \u201craw mode\u201d, which disables line buffering and echo.</p>"},{"location":"input/#reading-events","title":"Reading Events","text":"<p>Mordant provides a few ways to read input events, depending on how much control you need.</p> <p>Warning</p> <p>Enabling raw mode disables control character processing, which means that you will need to handle events like <code>ctrl-c</code> manually if you want your users to be able to exit your program.</p>"},{"location":"input/#reading-events-with-coroutine-flows","title":"Reading Events with Coroutine Flows","text":"<p>The simplest way to read events is to include the <code>mordant-coroutines</code> module, and use receiveEventsFlow, receiveKeyEventsFlow, or receiveMouseEventsFlow to receive events as a Flow. These functions will handle setting up raw mode and restoring the terminal to its original state when they are done.</p> Example of receiveEventsFlowExample of receiveMouseEventsFlowExample of receiveEventsFlow <pre><code>terminal.receiveKeyEventsFlow()\n    .takeWhile { !it.isCtrlC }\n    .collect { event -&gt;\n        terminal.info(\"You pressed ${event.key}\")\n    }\n</code></pre> <pre><code>terminal.receiveMouseEventsFlow()\n    .takeWhile { !it.right }\n    .filter { it.left }\n    .collect { event -&gt;\n        terminal.info(\"You clicked at ${event.x}, ${event.y}\")\n    }\n</code></pre> <pre><code>terminal.receiveEventsFlow()\n    .takeWhile { it !is KeyboardEvent || it.isCtrlC }\n    .collect { event -&gt;\n        when (event) {\n            is KeyboardEvent -&gt; terminal.info(\"You pressed ${event.key}\")\n            is MouseEvent -&gt; terminal.info(\"You clicked at ${event.x}, ${event.y}\")\n        }\n    }\n</code></pre>"},{"location":"input/#reading-events-with-callbacks","title":"Reading Events with Callbacks","text":"<p>If you don\u2019t want to use coroutines, you can use a callback lambda with one of receiveEvents, receiveKeyEvents, or receiveMouseEvents, depending on which type of events you want to read.</p> Example of receiveKeyEventsExample of receiveMouseEventsExample of receiveEvents <pre><code>terminal.receiveKeyEvents { event -&gt;\n    when {\n        event.isCtrlC -&gt; InputReceiver.Status.Finished\n        else -&gt; {\n            terminal.info(\"You pressed ${event.key}\")\n            InputReceiver.Status.Continue\n        }\n    }\n}\n</code></pre> <pre><code>terminal.receiveMouseEvents { event -&gt;\n    when {\n        event.right -&gt; InputReceiver.Status.Finished\n        else -&gt; {\n            if (event.left) terminal.info(\"You clicked at ${event.x}, ${event.y}\")\n            InputReceiver.Status.Continue\n        }\n    }\n}\n</code></pre> <pre><code>terminal.receiveEvents { event -&gt;\n    when(event) {\n        is KeyboardEvent -&gt; when {\n            event.isCtrlC -&gt; InputReceiver.Status.Finished\n            else -&gt; {\n                terminal.info(\"You pressed ${event.key}\")\n                InputReceiver.Status.Continue\n            }\n        }\n        is MouseEvent -&gt; {\n            if (event.left) terminal.info(\"You clicked at ${event.x}, ${event.y}\")\n            InputReceiver.Status.Continue\n        }\n    }\n}\n</code></pre> <p>See the API docs on KeyboardEvent and MouseEvent for more details on the properties of these events.</p> <p>Tip</p> <p>For mouse events, only button presses are reported. If you want mouse movement or drag events,  you can pass one of the MouseTracking values to receiveMouseEvents and receiveEvents.</p>"},{"location":"input/#reading-events-with-a-class","title":"Reading Events With a Class","text":"<p>If you have a class that you want to use to handle input events, you can use implement InputReceiver and call InputReceiver.receiveEvent.</p> <pre><code>class MyReceiver : InputReceiver&lt;Unit&gt; {\n    override fun receiveEvent(event: InputEvent): InputReceiver.Status&lt;Unit&gt; {\n        if (event is KeyboardEvent) {\n            if (event.isCtrlC) {\n                return InputReceiver.Status.Finished\n            } else {\n                terminal.info(\"You pressed ${event.key}\")\n            }\n        }\n        return InputReceiver.Status.Continue\n    }\n}\nMyReceiver().receiveEvents(terminal)\n</code></pre>"},{"location":"input/#reading-events-manually","title":"Reading Events Manually","text":"<p>If you need maximum control, you can enter raw mode manually with enterRawMode and read events one at a time with readKey, readMouse, or readEvent. The object returned by <code>enterRawMode</code> will restore the terminal to its original state when closed.</p> <pre><code>terminal.enterRawMode().use { rawMode -&gt;\n    while (true) {\n        val event = rawMode.readKey()\n        if (event == null || event.isCtrlC) break\n        terminal.info(\"You pressed: ${event.isCtrlC}\")\n    }\n}\n</code></pre>"},{"location":"input/#raw-mode-details","title":"Raw Mode Details","text":"<p>The exact behavior of which keys and mouse events are reported is highly dependent on the terminal app and operating system. Some things to keep in mind:</p> <ul> <li>Many special keys and modifier key combinations are not reported, especially on operating systems   other than Windows.</li> <li>Some key combinations aren\u2019t reported because they\u2019re intercepted by the terminal app to perform   actions like switching tabs or closing the window.</li> <li>For JS or wasmJS targets, raw mode is supported on Node.js only. You can also use Node.js\u2019s   <code>readline</code> module to read input with callbacks instead of blocking, or in the browser you can use   the <code>keydown</code> and <code>mousedown</code> events.</li> </ul> <p>Danger</p> <p>Reading events in raw mode on Node.js is not fully supported on Windows due to limitations in Node.js. When reading events, timeouts are ignored and the call will block until a key is pressed. Keys like the arrow keys, function keys, and some modifier keys may not be reported at all.</p>"},{"location":"input/#interactive-list-selection","title":"Interactive List Selection","text":"<p>Mordant includes a SelectList widget that you can use to create a list of items that the user can select from with the arrow keys and enter.</p> <p></p>"},{"location":"input/#selecting-a-single-item","title":"Selecting a single item","text":"<p>If you want to select one item from a list, you can use the interactiveSelectList function or  the InteractiveSelectListBuilder class.</p> Example with interactiveSelectListExample with interactiveSelectList DSLExample with InteractiveSelectListBuilder <pre><code>val selection = terminal.interactiveSelectList(\n    listOf(\"Small\", \"Medium\", \"Large\", \"X-Large\"),\n    title = \"Select a Pizza Size\",\n)\nif (selection == null) {\n    terminal.danger(\"Aborted pizza order\")\n} else {\n    terminal.success(\"You ordered a $selection pizza\")\n}\n</code></pre> <pre><code>val selection = terminal.interactiveSelectList {\n    addEntry(\"Small\")\n    addEntry(\"Medium\")\n    addEntry(\"Large\")\n    title(\"Select Pizza Size\")\n}\nif (selection == null) {\n    terminal.danger(\"Aborted pizza order\")\n} else {\n    terminal.success(\"You ordered a $selection pizza\")\n}\n</code></pre> <pre><code>val selection = InteractiveSelectListBuilder(terminal)\n    .entries(\"Small\", \"Medium\", \"Large\")\n    .title(\"Select Pizza Size\")\n    .createSingleSelectInputAnimation()\n    .receiveEvents()\nif (selection == null) {\n    terminal.danger(\"Aborted pizza order\")\n} else {\n    terminal.success(\"You ordered a $selection pizza\")\n}\n</code></pre>"},{"location":"input/#selecting-multiple-items","title":"Selecting multiple items","text":"<p>If you want to select multiple items from a list, you can use the interactiveMultiSelectList function.</p> Example with interactiveMultiSelectListExample with interactiveMultiSelectList DSLExample with InteractiveSelectListBuilder <pre><code>val selection = terminal.interactiveMultiSelectList(\n    listOf(\"Pepperoni\", \"Sausage\", \"Mushrooms\", \"Olives\"),\n    title = \"Select Toppings\",\n)\nif (selection.isEmpty()) {\n    terminal.danger(\"Aborted pizza order\")\n} else {\n    terminal.success(\"You ordered a pizza with ${selection.joinToString()}\")\n}\n</code></pre> <pre><code>val selection = terminal.interactiveMultiSelectList {\n    addEntry(\"Pepperoni\", selected=true)\n    addEntry(\"Sausage\", selected=true)\n    addEntry(\"Mushrooms\")\n    addEntry(\"Olives\")\n    title(\"Select Toppings\")\n    limit(2)\n    filterable(true)\n}\nif (selection == null) {\n    terminal.danger(\"Aborted pizza order\")\n} else {\n    terminal.success(\"You ordered a pizza with ${selection.joinToString()}\")\n}\n</code></pre> <pre><code>val selection = InteractiveSelectListBuilder(terminal)\n    .entries(\"Pepperoni\", \"Sausage\", \"Mushrooms\", \"Olives\")\n    .title(\"Select Toppings\")\n    .limit(2)\n    .filterable(true)\n    .createMultiSelectInputAnimation()\n    .receiveEvents()\nif (selection == null) {\n    terminal.danger(\"Aborted pizza order\")\n} else {\n    terminal.success(\"You ordered a pizza with ${selection.joinToString()}\")\n}\n</code></pre>"},{"location":"progress/","title":"Progress Bars","text":"<p>Mordant provides a simple way to create animated progress bars in your terminal.</p>"},{"location":"progress/#basic-usage","title":"Basic Usage","text":"<p>You can use the progressBarLayout DSL to define the layout of your progress bar. Then you can start the animation either on a thread with animateOnThread, or using coroutines with animateOnCoroutine.<code>animateOnThread</code> is JVM-only, but <code>animateOnCoroutine</code> is available on all platforms using the <code>mordant-coroutines</code> module.</p> <p>Once the animation is started, you can update the progress bar by calling update and advance.</p> Example with CoroutinesExample with ThreadsOutput <pre><code>val progress = progressBarLayout {\n    marquee(terminal.theme.warning(\"my-file-download.bin\"), width = 15)\n    percentage()\n    progressBar()\n    completed(style = terminal.theme.success)\n    speed(\"B/s\", style = terminal.theme.info)\n    timeRemaining(style = magenta)\n}.animateInCoroutine(terminal)\n\nlaunch { progress.execute() }\n\n// Update the progress as the download progresses\nprogress.update { total = 3_000_000_000 }\nwhile (!progress.finished) {\n    progress.advance(15_000_000)\n    Thread.sleep(100)\n}\n</code></pre> <pre><code>val progress = progressBarLayout {\n    marquee(terminal.theme.warning(\"my-file-download.bin\"), width = 15)\n    percentage()\n    progressBar()\n    completed(style = terminal.theme.success)\n    speed(\"B/s\", style = terminal.theme.info)\n    timeRemaining(style = magenta)\n}.animateOnThread(terminal)\n\nval future = progress.execute()\n\n// Update the progress as the download progresses\nprogress.update { total = 3_000_000_000 }\nwhile (!progress.finished) {\n    progress.advance(15_000_000)\n    Thread.sleep(100)\n}\n\n// Optional: wait for the future to complete so that the final frame of the\n// animation is rendered before the program exits.\nfuture.get()\n</code></pre> <p></p>"},{"location":"progress/#changing-text-while-animation-is-running","title":"Changing Text While Animation is Running","text":"<p>You can pass data to the progress bar by using progressBarContextLayout, which allows you to set a context value that your progress bar can use to render dynamic text.</p> Example with ContextOutput <pre><code>val progress = progressBarContextLayout&lt;String&gt; {\n    text { \"Status: $context\" }\n    progressBar()\n    completed()\n}.animateInCoroutine(terminal, context = \"Starting\", total = 4, completed = 1)\n\nlaunch { progress.execute() }\n\nval states = listOf(\"Downloading\", \"Extracting\", \"Done\")\nfor (state in states) {\n    delay(2.seconds)\n    progress.update {\n        context = state\n        completed += 1\n    }\n}\n</code></pre> <p></p> <p>Tip</p> <p>If you want a builder instead of a DSL, you can use the ProgressLayoutBuilder</p>"},{"location":"progress/#multiple-progress-bars","title":"Multiple Progress Bars","text":"<p>You can create multiple progress bars running at the same time using MultiProgressBarAnimation. Call addTask for each progress bar you want, passing in the layout for that bar. You can  use the same layout for multiple tasks, or different layouts for some of them.</p> <p>You can call advance and update on each task to update them separately.</p> <p>The columns of the progress bars will have their widths aligned to the same size by default, but you can change this by setting the <code>alignColumns</code> parameter in the layout.</p> Example with Multiple Progress BarsOutput <pre><code>val overallLayout = progressBarLayout(alignColumns = false) {\n    progressBar(width = 20)\n    percentage()\n    timeElapsed(compact = false)\n}\nval taskLayout = progressBarContextLayout&lt;Int&gt; {\n    text(fps = animationFps, align = TextAlign.LEFT) { \"\u232a step $context\" }\n}\n\nval progress = MultiProgressBarAnimation(terminal).animateInCoroutine()\nval overall = progress.addTask(overallLayout, total = 100)\nval tasks = List(3) { progress.addTask(taskLayout, total = 1, completed = 1, context = 0) }\n\nlaunch { progress.execute() }\n\nfor (i in 1..100) {\n    overall.advance()\n    tasks[i % 3].update { context = i }\n    delay(100)\n}\n</code></pre> <p></p> <p>Tip</p> <p>The progress animation will keep running until all tasks are finished. If you want to stop sooner, you can set all the tasks\u2019 <code>completed</code> equal to their <code>total</code>, or cancel the coroutine scope or future that the animation is running in.</p>"},{"location":"progress/#available-progress-bar-cell-types","title":"Available Progress Bar Cell Types","text":"<p>Mordant provides several cell types that you can use to build your progress bar layouts, or you can make your own with cell or text.</p> OutputCode <p></p> <pre><code>// Use a custom maker to build render the cells in a vertical definitionList\nobject VerticalProgressBarMaker : ProgressBarWidgetMaker {\n    override fun build(rows: List&lt;ProgressBarMakerRow&lt;*&gt;&gt;): Widget {\n        return definitionList {\n            inline = true\n            val widgets = MultiProgressBarWidgetMaker.buildCells(rows)\n            for ((term, desc) in widgets.flatten().windowed(2, 2)) {\n                entry(term, desc)\n            }\n        }\n    }\n}\n\nval progress = progressBarLayout {\n    text(\"text\"); text(\"text\")\n    text(\"marquee\"); marquee(\"marquee\", width = 10, scrollWhenContentFits = true)\n    text(\"completed\"); completed()\n    text(\"speed\"); speed()\n    text(\"percentage\"); percentage()\n    text(\"timeRemaining\"); timeRemaining()\n    text(\"timeElapsed\"); timeElapsed()\n    text(\"spinner\"); spinner(Spinner.Lines())\n    text(\"progressBar\"); progressBar()\n}.animateOnThread(terminal, maker = VerticalProgressBarMaker)\n\nlaunch { progress.execute() }\n\nwhile (!progress.finished) {\n    progress.advance()\n    delay(100)\n}\n</code></pre> Cell Type Description text You can make a static text cell with <code>text(\"\")</code>, or a dynamic one with <code>text {\"\"}</code> marquee A fixed-width text cell that scrolls its contents when they\u2019re larger than the cell. You can make the content always scroll by setting <code>scrollWhenContentFits=true</code> completed A cell that shows the completed count and optionally the total. It uses SI units for amounts larger than 1000 speed A cell that shows the speed of the progress, in bytes per second. percentage A cell that shows the completed percentage. timeRemaining A cell that shows the estimated time remaining, or optionally the elapsed time once a task finishes. If you want a different time format, you can do <code>text { myFormat(calculateTimeRemaining()) }</code> timeElapsed A cell that shows the elapsed time. If you want a different time format, you can do <code>text { myFormat(calculateTimeElapsed()) }</code> spinner A cell that shows an animated Spinner. progressBar A cell that shows a progress bar. cell A custom cell that can show any Widget"},{"location":"progress/#animating-on-custom-threads","title":"Animating on Custom Threads","text":"<p>If you want to run an animation on your own threading infrastructure instead of a Java Executor, there  are a couple of ways to do it.</p>"},{"location":"progress/#with-runblocking","title":"With <code>runBlocking</code>","text":"<p>If you are on JVM, you can still use animateOnThread, but call BlockingAnimator.runBlocking on you own thread instead of using execute.</p> <p>For example, to run an animation with RxJava:</p> <pre><code>val progress = progressBarLayout { /* ... */ }.animateOnThread(terminal)\nCompletable.create { progress.runBlocking() }\n    .subscribeOn(Schedulers.computation())\n    .subscribe()\n</code></pre>"},{"location":"progress/#calling-refresh-manually","title":"Calling <code>refresh</code> manually","text":"<p>If you aren\u2019t on JVM or want even more control, you can create a MultiProgressBarAnimation and call refresh manually each time you want a new frame to be rendered.</p> <pre><code>val layout = progressBarLayout { /* ... */ }\nval animation = MultiProgressBarAnimation(terminal)\nval task = animation.addTask(layout, total = 100)\n\nwhile (!animation.finished) {\n    task.advance()\n    animation.refresh()\n    sleep(33)\n}\n\n// Refresh all cells to draw the final frame\nanimation.refresh(refreshAll = true)\n</code></pre>"}]}